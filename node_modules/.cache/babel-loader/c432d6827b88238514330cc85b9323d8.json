{"ast":null,"code":"var _jsxFileName = \"E:\\\\quote-app\\\\quote-app\\\\src\\\\pages\\\\AllQuote.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport QuoteList from '../components/quotes/QuoteList';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport useHttp from '../hooks/use-http';\nimport { getAllQuotes } from '../lib/api';\nimport NotFound from './not-found';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AllQuote = () => {\n  _s();\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error\n  } = useHttp(getAllQuotes, true); // const DUMMY_QUOTES = [\n  //     { id: 'q1', author: 'shiny', text: 'Learning React is fun!' },\n  //     { id: 'q2', author: 'Kavery', text: 'Learning React is great!' },\n  //   ];\n\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === 'pending') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 10\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered focussed\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (status === 'completed' && (!loadedQuote || loadedQuote.length === 0)) {\n    return /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(QuoteList, {\n    quotes: loadedQuote\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AllQuote, \"AwQc/mVXCxNZYso+YwHzf6ZD1/8=\", false, function () {\n  return [useHttp];\n});\n\n_c = AllQuote;\nexport default AllQuote;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllQuote\");","map":{"version":3,"sources":["E:/quote-app/quote-app/src/pages/AllQuote.js"],"names":["useEffect","QuoteList","LoadingSpinner","useHttp","getAllQuotes","NotFound","AllQuote","sendRequest","status","data","loadedQuote","error","length"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAOC,QAAP,MAAqB,aAArB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAErB,QAAK;AAACC,IAAAA,WAAD;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,IAAI,EAAEC,WAA5B;AAAyCC,IAAAA;AAAzC,MAAgDR,OAAO,CAACC,YAAD,EAAe,IAAf,CAA5D,CAFqB,CAGnB;AACA;AACA;AACA;;AACCJ,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,WAAW;AAEZ,GAHQ,EAGN,CAACA,WAAD,CAHM,CAAT;;AAIA,MAAGC,MAAM,KAAG,SAAZ,EAAsB;AACpB,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AACD,MAAGG,KAAH,EAAS;AACP,wBAAO;AAAG,MAAA,SAAS,EAAC,mBAAb;AAAA,gBAAkCA;AAAlC;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,MAAGH,MAAM,KAAG,WAAT,KAAwB,CAACE,WAAD,IAAgBA,WAAW,CAACE,MAAZ,KAAuB,CAA/D,CAAH,EAAqE;AACnE,wBAAO,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACJ,sBAAO,QAAC,SAAD;AAAW,IAAA,MAAM,EAAEF;AAAnB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAzBD;;GAAMJ,Q;UAEiDH,O;;;KAFjDG,Q;AA0BN,eAAeA,QAAf","sourcesContent":["import { useEffect } from 'react';\r\nimport QuoteList from '../components/quotes/QuoteList';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getAllQuotes } from '../lib/api';\r\nimport NotFound from './not-found';\r\n\r\nconst AllQuote = () => {\r\n  \r\n  const{sendRequest, status, data: loadedQuote, error}=useHttp(getAllQuotes, true);\r\n    // const DUMMY_QUOTES = [\r\n    //     { id: 'q1', author: 'shiny', text: 'Learning React is fun!' },\r\n    //     { id: 'q2', author: 'Kavery', text: 'Learning React is great!' },\r\n    //   ];\r\n     useEffect(() => {\r\n       sendRequest();\r\n       \r\n     }, [sendRequest]);\r\n     if(status==='pending'){\r\n       return (\r\n         <div className='centered'>\r\n           <LoadingSpinner/>\r\n         </div>\r\n       )\r\n     }\r\n     if(error){\r\n       return <p className='centered focussed'>{error}</p>\r\n     }\r\n     if(status==='completed'&& (!loadedQuote || loadedQuote.length === 0)){\r\n       return <NotFound/>\r\n     }\r\n  return <QuoteList quotes={loadedQuote}></QuoteList>\r\n};\r\nexport default AllQuote;\r\n "]},"metadata":{},"sourceType":"module"}