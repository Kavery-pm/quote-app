{"ast":null,"code":"const FIREBASE_DOMAIN = \"https://reacthook-f4714.firebaseio.com/\";\nexport const getAllQuotes = async () => {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n  if (!response.ok) throw new Error(data.message || \"could not fetch quotes\");\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObject = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObject);\n  }\n\n  return transformedQuotes;\n};\nexport const getSingleQuote = async quoteId => {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = response.json();\n  if (!response.ok) throw new Error(data.message || \"could not fetch quote\");\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n};\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: \"POST\",\n    body: JSON.stringify(quoteData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n\n  return null;\n}","map":{"version":3,"sources":["E:/quote-app/quote-app/src/lib/api.js"],"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObject","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers"],"mappings":"AAAA,MAAMA,eAAe,GAAG,yCAAxB;AACA,OAAO,MAAMC,YAAY,GAAG,YAAY;AACtC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,cAApB,CAA5B;AACA,QAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,MAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,wBAA1B,CAAN;AAClB,QAAMC,iBAAiB,GAAG,EAA1B;;AACA,OAAK,MAAMC,GAAX,IAAkBN,IAAlB,EAAwB;AACtB,UAAMO,WAAW,GAAG;AAClBC,MAAAA,EAAE,EAAEF,GADc;AAElB,SAAGN,IAAI,CAACM,GAAD;AAFW,KAApB;AAIAD,IAAAA,iBAAiB,CAACI,IAAlB,CAAuBF,WAAvB;AACD;;AACD,SAAOF,iBAAP;AACD,CAbM;AAeP,OAAO,MAAMK,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C,QAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,WAAUe,OAAQ,OAAtC,CAA5B;AACA,QAAMX,IAAI,GAAGF,QAAQ,CAACG,IAAT,EAAb;AACA,MAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,uBAA1B,CAAN;AAClB,QAAMQ,WAAW,GAAG;AAClBJ,IAAAA,EAAE,EAAEG,OADc;AAElB,OAAGX;AAFe,GAApB;AAIA,SAAOY,WAAP;AACD,CATM;AAWP,OAAO,eAAeC,QAAf,CAAwBC,SAAxB,EAAmC;AACxC,QAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,eAAgB,cAApB,EAAmC;AAC7DmB,IAAAA,MAAM,EAAE,MADqD;AAE7DC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,SAAf,CAFuD;AAG7DK,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHoD,GAAnC,CAA5B;AAOA,QAAMnB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,MAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,yBAA1B,CAAN;AACD;;AAED,SAAO,IAAP;AACD","sourcesContent":["const FIREBASE_DOMAIN = \"https://reacthook-f4714.firebaseio.com/\";\r\nexport const getAllQuotes = async () => {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\r\n  const data = await response.json();\r\n  if (!response.ok) throw new Error(data.message || \"could not fetch quotes\");\r\n  const transformedQuotes = [];\r\n  for (const key in data) {\r\n    const quoteObject = {\r\n      id: key,\r\n      ...data[key],\r\n    };\r\n    transformedQuotes.push(quoteObject);\r\n  }\r\n  return transformedQuotes;\r\n};\r\n\r\nexport const getSingleQuote = async (quoteId) => {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\r\n  const data = response.json();\r\n  if (!response.ok) throw new Error(data.message || \"could not fetch quote\");\r\n  const loadedQuote = {\r\n    id: quoteId,\r\n    ...data,\r\n  };\r\n  return loadedQuote;\r\n};\r\n\r\nexport async function addQuote(quoteData) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(quoteData),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || \"Could not create quote.\");\r\n  }\r\n\r\n  return null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}